"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllPicFiles = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const cli_table_1 = __importDefault(require("cli-table"));
const colorette_1 = require("colorette");
const getAllPicFiles = (path) => __awaiter(void 0, void 0, void 0, function* () {
    let canBeCompressedPicTotalSize = 0;
    let cannotBeCompressedPicFilesTotalSize = 0;
    // const allPicFiles: PicFile[] = []
    const canBeCompressedPicFiles = [];
    const cannotBeCompressedPicFiles = [];
    yield walkSync(path, (filePath, dirent) => {
        if (dirent.name.endsWith('.png') ||
            dirent.name.endsWith('.jpg') ||
            dirent.name.endsWith('.jpeg')) {
            let size = getFileSizeInBytes(filePath);
            canBeCompressedPicFiles.push({
                filePath,
                size,
            });
            canBeCompressedPicTotalSize += size;
        }
        if (dirent.name.endsWith('.gif') || dirent.name.endsWith('.svg')) {
            let size = getFileSizeInBytes(filePath);
            cannotBeCompressedPicFiles.push({
                filePath,
                size,
            });
            cannotBeCompressedPicFilesTotalSize += size;
        }
    });
    const canBeCompressedPicTotalSizeMB = (canBeCompressedPicTotalSize / 1024 / 1024).toFixed(2);
    const cannotBeCompressedPicFilesTotalSizeMB = (cannotBeCompressedPicFilesTotalSize /
        1024 /
        1024).toFixed(2);
    const table = new cli_table_1.default({
        style: {
            border: ['cyan'],
            head: ['yellow'],
        },
        head: ['', 'Count', 'Size(MB)', 'Size(Bytes)'],
    });
    table.push({
        canBeCompressedPicFiles: [
            String(canBeCompressedPicFiles.length),
            canBeCompressedPicTotalSizeMB,
            String(canBeCompressedPicTotalSize),
        ],
    }, {
        cannotBeCompressedPicFiles: [
            String(cannotBeCompressedPicFiles.length),
            cannotBeCompressedPicFilesTotalSizeMB,
            String(cannotBeCompressedPicFilesTotalSize),
        ],
    });
    console.log(table.toString());
    console.log('Notice: Gif and svg files cannot be compressed.');
    console.log((0, colorette_1.bold)((0, colorette_1.cyan)('Total size(MB):')), (0, colorette_1.bold)((0, colorette_1.cyan)(((canBeCompressedPicTotalSize + cannotBeCompressedPicFilesTotalSize) / 1024 / 1024).toFixed(2) + 'MB')));
    console.log((0, colorette_1.cyan)('Total size(Bytes):'), (0, colorette_1.cyan)(canBeCompressedPicTotalSize + cannotBeCompressedPicFilesTotalSize));
    return {
        list: canBeCompressedPicFiles,
        totalSize: canBeCompressedPicTotalSize,
        totalSizeMB: canBeCompressedPicTotalSizeMB,
    };
});
exports.getAllPicFiles = getAllPicFiles;
const walkSync = (currentDirPath, callback) => {
    fs_1.default.readdirSync(currentDirPath, { withFileTypes: true }).forEach((dirent) => {
        const filePath = path_1.default.join(currentDirPath, dirent.name);
        if (dirent.isFile()) {
            callback(filePath, dirent);
        }
        else if (dirent.isDirectory()) {
            walkSync(filePath, callback);
        }
    });
};
const getFileSizeInBytes = (filename) => {
    var stats = fs_1.default.statSync(filename);
    var fileSizeInBytes = stats.size;
    return fileSizeInBytes;
};
