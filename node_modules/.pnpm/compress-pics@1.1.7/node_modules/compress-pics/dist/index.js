"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tinify_1 = __importDefault(require("tinify"));
const inputPath_1 = require("./inputPath");
const getAllPicFilesPath_1 = require("./getAllPicFilesPath");
const brandAscii_1 = require("./brandAscii");
const inquirer_1 = __importDefault(require("inquirer"));
const terminal_link_1 = __importDefault(require("terminal-link"));
const colorette_1 = require("colorette");
let path = '';
let size = 0;
let sizeAfter = 0;
const init = () => __awaiter(void 0, void 0, void 0, function* () {
    (0, brandAscii_1.brandAsciiCompressPics)();
    console.log();
    path = (yield (0, inputPath_1.getFolderPath)()).path;
    console.log('Your images directory is:', path);
    const allPicFilesInfo = yield (0, getAllPicFilesPath_1.getAllPicFiles)(path);
    size = allPicFilesInfo.totalSize;
    yield compressPicsList(allPicFilesInfo.list);
});
const compressPicsList = (list, startIndex = 0) => __awaiter(void 0, void 0, void 0, function* () {
    const link = (0, terminal_link_1.default)('Tiny.com API', 'https://tinify.com/dashboard/api');
    const answers = yield inquirer_1.default.prompt([
        {
            name: 'tinypngApi',
            message: `Please input a valid tinypng api key to continue ( You can find it at ${link} ): `,
        },
    ]);
    tinify_1.default.key = answers.tinypngApi;
    for (let i = startIndex; i < list.length; i++) {
        console.log('processing: ', i + 1, '/', list.length, list[i].filePath);
        try {
            yield tinify_1.default.fromFile(list[i].filePath).toFile(list[i].filePath);
            // last one
            if (i === list.length - 1) {
                (0, brandAscii_1.brandAsciiCompressPics)({
                    text: 'Finished',
                    font: 'Standard',
                });
                const allPicFilesInfoAfter = yield (0, getAllPicFilesPath_1.getAllPicFiles)(path);
                sizeAfter = allPicFilesInfoAfter.totalSize;
                console.log((0, colorette_1.green)('================================================================================'));
                console.log((0, colorette_1.bold)((0, colorette_1.cyan)(`The total size has decreased by ${(((size - sizeAfter) / size) * 100).toFixed(2)}% after compression.`)));
            }
        }
        catch (err) {
            // https://tinypng.com/developers/reference/nodejs#error-handling
            if (err instanceof tinify_1.default.AccountError) {
                console.log('The error message is: ' + err.message);
                compressPicsList(list, i);
            }
            break;
        }
    }
});
init();
